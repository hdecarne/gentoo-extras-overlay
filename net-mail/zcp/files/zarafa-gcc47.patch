From: Jan Engelhardt <jengelh@inai.de>
Date: 2012-06-22 00:34:08.177803888 +0200

g++ -DHAVE_CONFIG_H -I. -I../../common  -I../../mapi4linux/include -I../../common -I../../provider/include -I../../ECtools/zarafa-archiver  -I/usr/include/CLucene/ext -I/usr/lib64   -DBOOST_FILESYSTEM_VERSION=2 -DLINUX   -fmessage-length=0 -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector -funwind-tables -fasynchronous-unwind-tables -g   -g -rdynamic -Wall -Wno-write-strings  -DHAVE_CONFIG_H -pedantic -Wno-long-long  -Wno-variadic-macros -pthread -O2 -fno-strict-aliasing -DNDEBUG -DFORCE_CHARSET_CONVERSION -DUNICODE -c -o ECIndexImporterAttachments.o ECIndexImporterAttachments.cpp
ECIndexImporterAttachments.cpp: In member function 'HRESULT ECIndexImporterAttachment::CopyStreamToParser(IStream*, int, int, std::wstring*)':
ECIndexImporterAttachments.cpp:249:34: error: 'max' was not declared in this scope
ECIndexImporterAttachments.cpp:249:34: note: suggested alternative:
/usr/include/c++/4.7/bits/stl_algobase.h:254:5: note:   'std::max'

ECIndexImporterAttachments.cpp:440:3: error: 'string' was not declared in this scope
ECIndexImporterAttachments.cpp:440:3: note: suggested alternative:
/usr/include/c++/4.7/bits/stringfwd.h:65:33: note:   'std::string'

ECIndexImporterAttachments.cpp:443:4: error: 'set' was not declared in this scope
ECIndexImporterAttachments.cpp:443:4: note: suggested alternative:
/usr/include/c++/4.7/bits/stl_set.h:91:11: note:   'std::set'

ECIndexImporterAttachments.cpp:602:46: error: 'min' was not declared in this scope
ECIndexImporterAttachments.cpp:602:46: note: suggested alternative:
/usr/include/c++/4.7/bits/stl_algobase.h:233:5: note:   'std::min'

ECIndexImporter.cpp: In member function 'HRESULT ECIndexImporter::ProcessThread()':
ECIndexImporter.cpp:400:5: error: 'auto_ptr' was not declared in this scope

---
 ECtools/zarafa-search/ECIndexImporter.cpp            |    3 +-
 ECtools/zarafa-search/ECIndexImporterAttachments.cpp |   24 +++++++++++--------
 2 files changed, 16 insertions(+), 11 deletions(-)

Index: zarafa-7.1.0/ECtools/zarafa-search/ECIndexImporter.cpp
===================================================================
--- zarafa-7.1.0.orig/ECtools/zarafa-search/ECIndexImporter.cpp
+++ zarafa-7.1.0/ECtools/zarafa-search/ECIndexImporter.cpp
@@ -47,6 +47,7 @@
  * 
  */
 
+#include <memory>
 #include "platform.h"
 
 #include "ECIndexImporter.h"
@@ -433,7 +434,7 @@ HRESULT ECIndexImporter::ProcessThread()
     ECIndexDB *lpIndex = NULL;
     ECIndexDB *lpThisIndex = NULL;
     ArchiveItem *lpArchiveItem = NULL;
-    auto_ptr<ArchiveItem> lpStubTarget;
+    std::auto_ptr<ArchiveItem> lpStubTarget;
     
     m_lpLogger->Log(EC_LOGLEVEL_DEBUG, "Importer thread started");
     
Index: zarafa-7.1.0/ECtools/zarafa-search/ECIndexImporterAttachments.cpp
===================================================================
--- zarafa-7.1.0.orig/ECtools/zarafa-search/ECIndexImporterAttachments.cpp
+++ zarafa-7.1.0/ECtools/zarafa-search/ECIndexImporterAttachments.cpp
@@ -47,6 +47,10 @@
  * 
  */
 
+#include <algorithm>
+#include <set>
+#include <string>
+
 #include <platform.h>
 
 #include <mapi.h>
@@ -246,7 +250,7 @@ HRESULT ECIndexImporterAttachment::CopyS
 	ULONG ulWriteData;
 	fd_set rset, wset;
 	int res;
-	int fd = max(ulFpWrite, ulFpRead);
+	int fd = std::max(ulFpWrite, ulFpRead);
 	struct timeval timeout;
 
 
@@ -267,7 +271,7 @@ HRESULT ECIndexImporterAttachment::CopyS
 		FD_ZERO(&wset);
 		if (ulTotalWriteData) {
 			FD_SET(ulFpWrite, &wset);
-			fd = max(ulFpWrite, ulFpRead);
+			fd = std::max(ulFpWrite, ulFpRead);
 		} else {
 			fd = ulFpRead;
 		}
@@ -437,10 +441,10 @@ HRESULT ECIndexImporterAttachment::Parse
 	command.assign(m_strCommand + " ");
 
 	if (!strMimeTag.empty() && strMimeTag.compare(_T("application/octet-stream")) != 0) {
-		string tmp = trim(convert_to<string>(strMimeTag), "\r\n ");
+		std::string tmp = trim(convert_to<std::string>(strMimeTag), "\r\n ");
 		size_t pos = tmp.find_first_of('/');
 		if (pos != std::string::npos) {
-			set<string, stricmp_comparison>::iterator i = m_lpThreadData->m_setMimeFilter.find(string(tmp,0,pos));
+			std::set<std::string, stricmp_comparison>::iterator i = m_lpThreadData->m_setMimeFilter.find(std::string(tmp,0,pos));
 			if (i != m_lpThreadData->m_setMimeFilter.end()) {
 				m_lpThreadData->lpLogger->Log(EC_LOGLEVEL_DEBUG, "Skipping filtered attachment mimetype: %s for %ls", tmp.c_str(), strFilename.c_str());
 				hr = MAPI_E_INVALID_OBJECT;
@@ -452,8 +456,8 @@ HRESULT ECIndexImporterAttachment::Parse
 		command.append("'");
 	} else if (!strExtension.empty()) {
 		// this string mostly does not exist
-		string tmp = trim(convert_to<string>(strExtension), "\r\n ");
-		set<string, stricmp_comparison>::iterator i = m_lpThreadData->m_setExtFilter.find(string(tmp,1)); // skip dot in extension find
+		std::string tmp = trim(convert_to<std::string>(strExtension), "\r\n ");
+		std::set<std::string, stricmp_comparison>::iterator i = m_lpThreadData->m_setExtFilter.find(std::string(tmp,1)); // skip dot in extension find
 		if (i != m_lpThreadData->m_setExtFilter.end()) {
 			m_lpThreadData->lpLogger->Log(EC_LOGLEVEL_DEBUG, "Skipping filtered attachment extension: %s for %ls", tmp.c_str(), strFilename.c_str());
 			hr = MAPI_E_INVALID_OBJECT;
@@ -463,14 +467,14 @@ HRESULT ECIndexImporterAttachment::Parse
 		command.append(forcealnum(tmp, "."));
 		command.append("'");
 	} else if (!strFilename.empty()) {
-		std::string tmp = trim(convert_to<string>(strFilename), "\r\n ");
+		std::string tmp = trim(convert_to<std::string>(strFilename), "\r\n ");
 		size_t pos = tmp.find_last_of('.');
 		if (pos == std::string::npos)
 			goto exit;
 
 		
 		// skip dot in find
-		set<string, stricmp_comparison>::iterator i = m_lpThreadData->m_setExtFilter.find(string(tmp, pos+1));
+		std::set<std::string, stricmp_comparison>::iterator i = m_lpThreadData->m_setExtFilter.find(std::string(tmp, pos+1));
 		if (i != m_lpThreadData->m_setExtFilter.end()) {
 			m_lpThreadData->lpLogger->Log(EC_LOGLEVEL_DEBUG, "Skipping filtered attachment extension: %ls", strFilename.c_str());
 			hr = MAPI_E_INVALID_OBJECT;
@@ -478,7 +482,7 @@ HRESULT ECIndexImporterAttachment::Parse
 		}
 
 		command.append("ext '");
-		command.append(forcealnum(string(tmp, pos), "."));
+		command.append(forcealnum(std::string(tmp, pos), "."));
 		command.append("'");
 	} else {
 		m_lpThreadData->lpLogger->Log(EC_LOGLEVEL_DEBUG, "Invalid attachment, no mimetag, extension or filename");
@@ -599,7 +603,7 @@ HRESULT ECIndexImporterAttachment::Parse
 	if (ulAttachSize) {
 		/* Copy attachment data into stream */
 		while (TRUE) {
-			ULONG ulRead = min(m_ulCache, ulAttachSize);
+			ULONG ulRead = std::min(m_ulCache, ulAttachSize);
 			ULONG ulCopy = ulRead;
 			ULONG ulWritten = 0;
 
